unit editor;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, Grids, ExtCtrls, Menus, StdCtrls, Buttons, jpeg, Tabs, ComCtrls,
  TabNotBk, ExtDlgs, Spin;

type
  Tfeditor = class(TForm)
    geditor: TDrawGrid;
    MainMenu1: TMainMenu;
    File1: TMenuItem;
    Newstage1: TMenuItem;
    Loadstage1: TMenuItem;
    Savestage1: TMenuItem;
    Saveas1: TMenuItem;
    N1: TMenuItem;
    N2: TMenuItem;
    Exit1: TMenuItem;
    About1: TMenuItem;
    tilesetMenu: TPopupMenu;
    Drawinselectedarea1: TMenuItem;
    dlgopen: TOpenDialog;
    dlgsave: TSaveDialog;
    Makethisareasolid1: TMenuItem;
    Makethisareanonsolid1: TMenuItem;
    N3: TMenuItem;
    Makethisareasolidontop1: TMenuItem;
    Makebottomsolid1: TMenuItem;
    Makeallsurfacessolid1: TMenuItem;
    N4: TMenuItem;
    Makeallsurfacesnonsolid1: TMenuItem;
    Fillselectedareaonsolid1: TMenuItem;
    N6: TMenuItem;
    Clearselectedarea1: TMenuItem;
    pages: TTabbedNotebook;
    gtileset: TDrawGrid;
    Panel1: TPanel;
    Label8: TLabel;
    Label6: TLabel;
    Label5: TLabel;
    Label7: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label1: TLabel;
    Bevel1: TBevel;
    imgpreview: TImage;
    Button1: TButton;
    imgBackgroundPreview: TImage;
    dlgopenpic: TOpenPictureDialog;
    Image2: TImage;
    Image1: TImage;
    Image3: TImage;
    BitBtn1: TBitBtn;
    imgEnm1: TImage;
    edtInterval: TSpinEdit;
    Panel2: TPanel;
    Label13: TLabel;
    Label14: TLabel;
    Label15: TLabel;
    Label16: TLabel;
    Label17: TLabel;
    Label18: TLabel;
    Label19: TLabel;
    Label20: TLabel;
    Splitter1: TSplitter;
    N5: TMenuItem;
    Breakable1: TMenuItem;
    Unbreakable1: TMenuItem;
    N7: TMenuItem;
    Pasteselection1: TMenuItem;
    Pasteselectionnonsolid1: TMenuItem;
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure Exit1Click(Sender: TObject);
    procedure gtilesetDrawCell(Sender: TObject; ACol, ARow: Integer;
      Rect: TRect; State: TGridDrawState);
    procedure geditorDrawCell(Sender: TObject; ACol, ARow: Integer;
      Rect: TRect; State: TGridDrawState);
    procedure gtilesetSelectCell(Sender: TObject; ACol, ARow: Integer;
      var CanSelect: Boolean);
    procedure Drawinselectedarea1Click(Sender: TObject);
    procedure Makeallsurfacessolid1Click(Sender: TObject);
    procedure Makethisareasolid1Click(Sender: TObject);
    procedure Makeallsurfacesnonsolid1Click(Sender: TObject);
    procedure Makethisareanonsolid1Click(Sender: TObject);
    procedure Makethisareasolidontop1Click(Sender: TObject);
    procedure Makebottomsolid1Click(Sender: TObject);
    procedure geditorSelectCell(Sender: TObject; ACol, ARow: Integer;
      var CanSelect: Boolean);
    procedure Savestage1Click(Sender: TObject);
    procedure Loadstage1Click(Sender: TObject);
    procedure Newstage1Click(Sender: TObject);
    procedure Saveas1Click(Sender: TObject);
    procedure Fillselectedareaonsolid1Click(Sender: TObject);
    procedure Clearselectedarea1Click(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure BitBtn1Click(Sender: TObject);
    procedure geditorKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure Breakable1Click(Sender: TObject);
    procedure Unbreakable1Click(Sender: TObject);
    procedure Pasteselection1Click(Sender: TObject);
    procedure Pasteselectionnonsolid1Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

type tsentidoy = (cima, repousoy, baixo);

type tenmsource = record
	enmtype : byte;
   row, col : integer;
   interval : byte;
   ativo : boolean;
end;

type tbloco = record
	x, y : integer;
   quebravel : boolean;
   slope : boolean;
   solido12h, solido6h, solido3h, solido9h : boolean;
   tilesheetrow, tilesheetcol : cardinal;
end;

const
	COL = 100;
   LIN = 15;
   TAM = 24;

   TAM_TILE = 16;

   MAX_ENMSOURCE = 50;

var
  feditor: Tfeditor;
  blocos : array[0..LIN - 1, 0..COL - 1] of tbloco;
  enmsource : array[1..MAX_ENMSOURCE] of tenmsource;
  tilesetbmp, backgroundbmp : tbitmap;

  filename : string;

  selectedTileRow, selectedTileCol : cardinal;

  SelectedEnmType : Byte;

implementation

{$R *.dfm}

procedure Tfeditor.FormCreate(Sender: TObject);
var
	i : cardinal;
begin
	backgroundbmp := tbitmap.create;

	tilesetbmp := tbitmap.create;
   tilesetbmp.LoadFromFile('tileset.bmp');

  	gtileset.RowCount := tilesetbmp.Height div TAM_TILE;
   gtileset.colCount := tilesetbmp.width div TAM_TILE;

   geditor.RowCount := LIN;
   geditor.colCount := COL;


   for i := 1 to MAX_ENMSOURCE do
   	enmsource[i].row := -1; // -1 indicates this source is not in use


   stretchblt(imgpreview.canvas.handle, 0, 0, 65, 65, tilesetbmp.canvas.handle, 0, 0, TAM_TILE, TAM_TILE, srccopy);
end;

procedure deleteEnmSource(row, col : cardinal);
var
	i : cardinal;
begin
	for i := 1 to MAX_ENMSOURCE do
   	if (enmsource[i].row = row) and (enmsource[i].col = col) then
      begin
      	enmsource[i].row := -1;
         break;
      end;
end;

function sourceAtCell(row, col : cardinal) : boolean;
var
	i : cardinal;
begin
	for i := 1 to MAX_ENMSOURCE do
   	if (enmsource[i].row = row) and (enmsource[i].col = col) then
      begin
      	result := true;
         exit;
      end;

   result := false;
end;

procedure Tfeditor.FormDestroy(Sender: TObject);
begin
	backgroundbmp.Free;
	tilesetbmp.free;
end;

procedure Tfeditor.Exit1Click(Sender: TObject);
begin
   close;
end;


procedure Tfeditor.gtilesetDrawCell(Sender: TObject; ACol, ARow: Integer;
  Rect: TRect; State: TGridDrawState);
begin
	stretchblt(gtileset.canvas.Handle, rect.left, rect.top, TAM, TAM, tilesetbmp.canvas.Handle, acol * TAM_TILE, arow * TAM_TILE, TAM_TILE, TAM_TILE, srccopy);
end;

procedure Tfeditor.geditorDrawCell(Sender: TObject; ACol, ARow: Integer;
  Rect: TRect; State: TGridDrawState);
var
	i : cardinal;
begin
	stretchblt(geditor.canvas.handle, rect.left, rect.top, 32, 32, tilesetbmp.canvas.handle, blocos[arow, acol].tilesheetcol * TAM_TILE, blocos[arow, acol].tilesheetrow * TAM_TILE, TAM_TILE, TAM_TILE, srccopy);

   geditor.Canvas.Brush.Style := bsclear;
   geditor.canvas.Font.Color := clwhite;


   for i := 1 to MAX_ENMSOURCE do
   	if (enmsource[i].row = arow) and (enmsource[i].col = acol) then
      	stretchblt(geditor.canvas.handle, rect.Left, rect.Top, 32, 32, imgenm1.Canvas.handle, 0, 0, 31, 41, srccopy);

   if (blocos[arow, acol].solido12h) or (blocos[arow, acol].solido3h) or (blocos[arow, acol].solido6h) or (blocos[arow, acol].solido9h) then
   	geditor.Canvas.textout(acol * 32 + 13, arow * 32, 's');
   if blocos[arow, acol].quebravel then
   	geditor.Canvas.textout(acol * 32 + 13, arow * 32 + 10, 'b');
end;

procedure Tfeditor.gtilesetSelectCell(Sender: TObject; ACol, ARow: Integer;
  var CanSelect: Boolean);
begin
	selectedTileRow := arow;
   selectedTileCol := acol;

   stretchblt(imgpreview.canvas.Handle, 0, 0, imgpreview.width, imgpreview.height, tilesetbmp.canvas.Handle, acol * TAM_TILE, arow * TAM_TILE, TAM_TILE, TAM_TILE, srccopy);
   imgpreview.Refresh;

   label3.caption := inttostr(arow);
   label4.caption := inttostr(acol);
end;

procedure Tfeditor.Drawinselectedarea1Click(Sender: TObject);
var
	i, j, i1, i2, j1, j2 : cardinal;
begin
	i1 := geditor.Selection.Top;
   i2 := geditor.Selection.bottom;
   j1 := geditor.Selection.left;
   j2 := geditor.Selection.right;

	for i := i1 to i2 do
   	for j := j1 to j2 do
      begin
      	blocos[i, j].tilesheetrow := selectedTileRow;
         blocos[i, j].tilesheetcol := selectedTileCol;
         blocos[i, j].solido12h := true;
         blocos[i, j].solido3h := true;
         blocos[i, j].solido6h := true;
         blocos[i, j].solido9h := true;
      end;
      
   geditor.Refresh;
end;

procedure Tfeditor.Makeallsurfacessolid1Click(Sender: TObject);
var
	i, j, i1, i2, j1, j2 : cardinal;
begin
	i1 := geditor.Selection.Top;
   i2 := geditor.Selection.bottom;
   j1 := geditor.Selection.left;
   j2 := geditor.Selection.right;

	for i := i1 to i2 do
   	for j := j1 to j2 do
      begin
      	blocos[i, j].solido12h := true;
         blocos[i, j].solido3h := true;
         blocos[i, j].solido6h := true;
         blocos[i, j].solido9h := true;
      end;

   geditor.Refresh;
end;

procedure Tfeditor.Makethisareasolid1Click(Sender: TObject);
var
	i, j, i1, i2, j1, j2 : cardinal;
begin
	i1 := geditor.Selection.Top;
   i2 := geditor.Selection.bottom;
   j1 := geditor.Selection.left;
   j2 := geditor.Selection.right;

	for i := i1 to i2 do
   	for j := j1 to j2 do
      begin
      	blocos[i, j].solido12h := false;
         blocos[i, j].solido3h := false;
         blocos[i, j].solido6h := false;
         blocos[i, j].solido9h := true;
      end;
   geditor.Refresh;
end;

procedure Tfeditor.Makeallsurfacesnonsolid1Click(Sender: TObject);
var
	i, j, i1, i2, j1, j2 : cardinal;
begin
	i1 := geditor.Selection.Top;
   i2 := geditor.Selection.bottom;
   j1 := geditor.Selection.left;
   j2 := geditor.Selection.right;

	for i := i1 to i2 do
   	for j := j1 to j2 do
      begin
      	blocos[i, j].solido12h := false;
         blocos[i, j].solido3h := false;
         blocos[i, j].solido6h := false;
         blocos[i, j].solido9h := false;
      end;
	geditor.Refresh;
end;

procedure Tfeditor.Makethisareanonsolid1Click(Sender: TObject);
var
	i, j, i1, i2, j1, j2 : cardinal;
begin
	i1 := geditor.Selection.Top;
   i2 := geditor.Selection.bottom;
   j1 := geditor.Selection.left;
   j2 := geditor.Selection.right;

	for i := i1 to i2 do
   	for j := j1 to j2 do
      begin
      	blocos[i, j].solido12h := false;
         blocos[i, j].solido3h := true;
         blocos[i, j].solido6h := false;
         blocos[i, j].solido9h := false;
      end;
   geditor.Refresh;
end;

procedure Tfeditor.Makethisareasolidontop1Click(Sender: TObject);
var
	i, j, i1, i2, j1, j2 : cardinal;
begin
	i1 := geditor.Selection.Top;
   i2 := geditor.Selection.bottom;
   j1 := geditor.Selection.left;
   j2 := geditor.Selection.right;

	for i := i1 to i2 do
   	for j := j1 to j2 do
      begin
      	blocos[i, j].solido12h := true;
         blocos[i, j].solido3h := false;
         blocos[i, j].solido6h := false;
         blocos[i, j].solido9h := false;
      end;
   geditor.Refresh;
end;

procedure Tfeditor.Makebottomsolid1Click(Sender: TObject);
var
	i, j, i1, i2, j1, j2 : cardinal;
begin
	i1 := geditor.Selection.Top;
   i2 := geditor.Selection.bottom;
   j1 := geditor.Selection.left;
   j2 := geditor.Selection.right;

	for i := i1 to i2 do
   	for j := j1 to j2 do
      begin
      	blocos[i, j].solido12h := false;
         blocos[i, j].solido3h := false;
         blocos[i, j].solido6h := true;
         blocos[i, j].solido9h := false;
      end;
   geditor.Refresh;
end;

procedure Tfeditor.geditorSelectCell(Sender: TObject; ACol, ARow: Integer;
  var CanSelect: Boolean);
var
	i : cardinal;             
begin
	if blocos[arow, acol].solido9h then
   	label5.Caption := 'Solid on the left: Yes'
   else
   	label5.caption := 'Solid on the left: No';
   if blocos[arow, acol].solido3h then
   	label6.Caption := 'Solid on the right: Yes'
   else
   	label6.caption := 'Solid on the right: No';
   if blocos[arow, acol].solido12h then
   	label7.Caption := 'Solid on top: Yes'
   else
   	label7.caption := 'Solid on top: No';
   if blocos[arow, acol].solido6h then
   	label8.Caption := 'Solid on bottom: Yes'
   else
   	label8.caption := 'Solid on bottom: No';

   if pages.PageIndex = 2 then
   	if not sourceAtCell(arow, acol) then
   		for i := 1 to MAX_ENMSOURCE do
      		if enmsource[i].row = -1 then
         	begin
         		enmsource[i].row := arow;
            	enmsource[i].col := acol;
            	enmsource[i].enmtype := selectedEnmType;
            	enmsource[i].interval := edtInterval.Value;
            	break;
         	end;
end;

procedure Tfeditor.Savestage1Click(Sender: TObject);
var
	stagefile :  file of tbloco;
   enmfile : file of tenmsource;
   i, j : cardinal;
   enms : string;
begin
	if filename = '' then
   begin
		if dlgsave.Execute then
   	begin
   		assignfile(stagefile, dlgsave.FileName);
      	rewrite(stagefile);

      	for i := 0 to LIN - 1 do
      		for j := 0 to COL - 1 do
         		write(stagefile, blocos[i, j]);

         filename := dlgsave.filename;
         feditor.caption := 'Stage Editor - ' + filename;

      	closefile(stagefile);

         enms := extractfilepath(filename) + extractfilename(filename);
         delete(enms, length(enms) - 3, 4);
         insert('.enm', enms, length(enms) + 1);

         assignfile(enmfile, enms);
         rewrite(enmfile);

         for i := 1 to MAX_ENMSOURCE do
         	write(enmfile, enmsource[i]);


         closefile(enmfile);
   	end
   end
   else
   begin
   	assignfile(stagefile, filename);
      rewrite(stagefile);

      for i := 0 to LIN - 1 do
         for j := 0 to COL - 1 do
            write(stagefile, blocos[i, j]);

      closefile(stagefile);

      enms := extractfilepath(filename) + extractfilename(filename);
      delete(enms, length(enms) - 3, 4);
      insert('.enm', enms, length(enms) + 1);

      assignfile(enmfile, enms);
      rewrite(enmfile);

     	for i := 1 to MAX_ENMSOURCE do
      	write(enmfile, enmsource[i]);

      closefile(enmfile);
   end;
end;

procedure Tfeditor.Loadstage1Click(Sender: TObject);
var
	stagefile : file of tbloco;
   enmfile : file of tenmsource;
   i, j : cardinal;
   b : tbloco;
   enms : string;
begin
	if dlgopen.Execute then
   begin
   	filemode := fmOpenRead;
      
   	assignfile(stagefile, dlgopen.filename);
      reset(stagefile);

      for i := 0 to LIN - 1 do
      	for j := 0 to COL - 1 do
      	begin
      		read(stagefile, b);
            blocos[i, j] := b;
      	end;

       filename := dlgopen.filename;
       feditor.caption := 'Stage Editor - ' + filename;

      closefile(stagefile);

      enms := extractfilepath(filename) + extractfilename(filename);
      delete(enms, length(enms) - 3, 4);
      insert('.enm', enms, length(enms) + 1);

      assignfile(enmfile, enms);
      reset(enmfile);

     	for i := 1 to MAX_ENMSOURCE do
      	if not eof(enmfile) then read(enmfile, enmsource[i]);


      closefile(enmfile);
   end;

   geditor.Refresh;
end;

procedure Tfeditor.Newstage1Click(Sender: TObject);
var
	i, j : cardinal;
begin
	for i := 0 to LIN - 1 do
   	for j := 0 to COL - 1 do
      begin
      	blocos[i, j].quebravel := false;
      	blocos[i, j].tilesheetrow := 0;
         blocos[i, j].tilesheetcol := 0;
         blocos[i, j].solido12h := false;
         blocos[i, j].solido3h := false;
         blocos[i, j].solido6h := false;
         blocos[i, j].solido9h := false;
      end;

   for i := 1 to MAX_ENMSOURCE do
   	enmsource[i].row := -1;

   geditor.refresh;

   filename := '';
   feditor.caption := 'Stage Editor - New stage';
end;

procedure Tfeditor.Saveas1Click(Sender: TObject);
var
	stagefile :  file of tbloco;
   enmfile : file of tenmsource;
   enms : string;
   i, j : cardinal;
begin
	if dlgsave.Execute then
   begin
      assignfile(stagefile, dlgsave.FileName);
      rewrite(stagefile);

      for i := 0 to LIN - 1 do
         for j := 0 to COL - 1 do
            write(stagefile, blocos[i, j]);

      filename := dlgsave.FileName;
      feditor.caption := 'Stage Editor - ' + filename;

      closefile(stagefile);

      enms := extractfilepath(filename) + extractfilename(filename);
      delete(enms, length(enms) - 3, 4);
      insert('.enm', enms, length(enms) + 1);

      assignfile(enmfile, enms);
      rewrite(enmfile);

      for i := 1 to MAX_ENMSOURCE do
         write(enmfile, enmsource[i]);


      closefile(enmfile);
	end;
end;

procedure Tfeditor.Fillselectedareaonsolid1Click(Sender: TObject);
var
	i, j, i1, i2, j1, j2 : cardinal;
begin
	i1 := geditor.Selection.Top;
   i2 := geditor.Selection.bottom;
   j1 := geditor.Selection.left;
   j2 := geditor.Selection.right;

	for i := i1 to i2 do
   	for j := j1 to j2 do
      begin
      	blocos[i, j].tilesheetrow := selectedTileRow;
         blocos[i, j].tilesheetcol := selectedTileCol;
         blocos[i, j].solido12h := false;
         blocos[i, j].solido3h := false;
         blocos[i, j].solido6h := false;
         blocos[i, j].solido9h := false;
      end;
      
   geditor.Refresh;
end;

procedure Tfeditor.Clearselectedarea1Click(Sender: TObject);
var
	i, j, i1, i2, j1, j2 : cardinal;
begin
	i1 := geditor.Selection.Top;
   i2 := geditor.Selection.bottom;
   j1 := geditor.Selection.left;
   j2 := geditor.Selection.right;

	for i := i1 to i2 do
   	for j := j1 to j2 do
      begin
      	blocos[i, j].tilesheetrow := 0;
         blocos[i, j].tilesheetcol := 0;
         blocos[i, j].solido12h := false;
         blocos[i, j].solido3h := false;
         blocos[i, j].solido6h := false;
         blocos[i, j].solido9h := false;
      end;
      
   geditor.Refresh;
end;

procedure Tfeditor.Button1Click(Sender: TObject);
begin
	if dlgopenpic.Execute then
   begin
   	backgroundbmp.loadfromfile(dlgopenpic.filename);
      imgBackgroundpreview.Picture.Bitmap.Assign(backgroundbmp);
   end;
end;

procedure Tfeditor.BitBtn1Click(Sender: TObject);
begin
	selectedEnmType := 1;
end;

procedure Tfeditor.geditorKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	if key = 46 then
   begin
   	case pages.PageIndex of
      	0:
         begin
         	blocos[geditor.Row, geditor.col].solido12h := false;
            blocos[geditor.Row, geditor.col].solido3h := false;
            blocos[geditor.Row, geditor.col].solido6h := false;
            blocos[geditor.Row, geditor.col].solido9h := false;
            blocos[geditor.Row, geditor.col].tilesheetrow := 0;
            blocos[geditor.Row, geditor.col].tilesheetcol := 0;
         end;
         2:
         	deleteEnmSource(geditor.Row, geditor.col);
      end;
      geditor.Refresh;
   end;
end;

procedure Tfeditor.Breakable1Click(Sender: TObject);
var
	i, j, i1, i2, j1, j2 : cardinal;
begin
	i1 := geditor.Selection.Top;
   i2 := geditor.Selection.bottom;
   j1 := geditor.Selection.left;
   j2 := geditor.Selection.right;

	for i := i1 to i2 do
   	for j := j1 to j2 do
      	blocos[i, j].quebravel := true;

   geditor.Refresh;
end;

procedure Tfeditor.Unbreakable1Click(Sender: TObject);
var
	i, j, i1, i2, j1, j2 : cardinal;
begin
	i1 := geditor.Selection.Top;
   i2 := geditor.Selection.bottom;
   j1 := geditor.Selection.left;
   j2 := geditor.Selection.right;

	for i := i1 to i2 do
   	for j := j1 to j2 do
      	blocos[i, j].quebravel := false;

   geditor.Refresh;
end;

procedure Tfeditor.Pasteselection1Click(Sender: TObject);
var
	i, j : cardinal;
begin
	for i := gtileset.Selection.top to gtileset.Selection.Bottom do
   	for j := gtileset.Selection.Left to gtileset.selection.Right do
      	if (geditor.selection.top + i - gtileset.selection.top >= 0)
         and (geditor.selection.top + i - gtileset.selection.top < LIN)
         and (geditor.selection.left + j - gtileset.selection.left >= 0)
         and (geditor.selection.left + j - gtileset.selection.left < COL) then
      	begin
            blocos[geditor.selection.top + i - gtileset.selection.top, geditor.selection.left + j - gtileset.selection.left].tilesheetrow := i;
            blocos[geditor.selection.top + i - gtileset.selection.top, geditor.selection.left + j - gtileset.selection.left].tilesheetcol := j;

            blocos[geditor.selection.top + i - gtileset.selection.top, geditor.selection.left + j - gtileset.selection.left].solido12h := true;
            blocos[geditor.selection.top + i - gtileset.selection.top, geditor.selection.left + j - gtileset.selection.left].solido3h := true;
            blocos[geditor.selection.top + i - gtileset.selection.top, geditor.selection.left + j - gtileset.selection.left].solido6h := true;
            blocos[geditor.selection.top + i - gtileset.selection.top, geditor.selection.left + j - gtileset.selection.left].solido9h := true;
      	end;

   geditor.Refresh;
end;

procedure Tfeditor.Pasteselectionnonsolid1Click(Sender: TObject);
var
	i, j : cardinal;
begin
	for i := gtileset.Selection.top to gtileset.Selection.Bottom do
   	for j := gtileset.Selection.Left to gtileset.selection.Right do
      	if (geditor.selection.top + i - gtileset.selection.top >= 0)
         and (geditor.selection.top + i - gtileset.selection.top < LIN)
         and (geditor.selection.left + j - gtileset.selection.left >= 0)
         and (geditor.selection.left + j - gtileset.selection.left < COL) then
         begin
            blocos[geditor.selection.top + i - gtileset.selection.top, geditor.selection.left + j - gtileset.selection.left].tilesheetrow := i;
            blocos[geditor.selection.top + i - gtileset.selection.top, geditor.selection.left + j - gtileset.selection.left].tilesheetcol := j;

            blocos[geditor.selection.top + i - gtileset.selection.top, geditor.selection.left + j - gtileset.selection.left].solido12h := false;
            blocos[geditor.selection.top + i - gtileset.selection.top, geditor.selection.left + j - gtileset.selection.left].solido3h := false;
            blocos[geditor.selection.top + i - gtileset.selection.top, geditor.selection.left + j - gtileset.selection.left].solido6h := false;
            blocos[geditor.selection.top + i - gtileset.selection.top, geditor.selection.left + j - gtileset.selection.left].solido9h := false;
      	end;

   geditor.Refresh;
end;

end.
